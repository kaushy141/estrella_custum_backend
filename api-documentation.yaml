openapi: 3.0.3
info:
  title: Estrella Custom Backend API
  description: |
    Comprehensive API documentation for Estrella Custom Backend with CRUD operations, 
    activity logging, and AI webhook integration for customs and shipping management.
  version: 1.0.0
  contact:
    name: Estrella Custom Backend
    email: support@estrella.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://your-production-domain.com/api/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    AIWebhookAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Special JWT token for AI webhook authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        guid:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        groupId:
          type: integer
        isAdmin:
          type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Group:
      type: object
      properties:
        id:
          type: integer
        guid:
          type: string
          format: uuid
        name:
          type: string
        logo:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: integer
        guid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        groupId:
          type: integer
        createdBy:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            token:
              type: string
            user:
              $ref: '#/components/schemas/User'

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        error:
          type: object

paths:
  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check if the API is running
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  sessionId:
                    type: string

  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request - Email and password are required
        '401':
          description: Unauthorized - Invalid credentials or inactive account

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate session
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '400':
          description: Bad request - No token provided

  /auth/verify:
    get:
      tags:
        - Authentication
      summary: Verify JWT token
      description: Verify if the provided JWT token is valid
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '401':
          description: Invalid or expired token

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Generate a new JWT token using existing valid token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid or expired token

  # User Endpoints
  /user:
    post:
      tags:
        - Users
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
                - groupId
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                groupId:
                  type: integer
                isAdmin:
                  type: boolean
                  default: false
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request

    get:
      tags:
        - Users
      summary: Get all users
      description: Get all users with pagination and filters
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: groupId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

  /user/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags:
        - Users
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                isAdmin:
                  type: boolean
                isActive:
                  type: boolean
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found